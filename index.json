[{"authors":null,"categories":null,"content":"池田 樹生の業績ページです.\n北海道大学大学院 情報科学院 情報科学研究科 情報理工学専攻 修士課程1年\n調和系工学研究室所属\n  Download my resumé.\n","date":1653366849,"expirydate":-62135596800,"kind":"term","lang":"ja","lastmod":1653366849,"objectID":"beedcf3c7b2935aca50e531a2dbf3d5e","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"池田 樹生の業績ページです. 北海道大学大学院 情報科学院 情報科学","tags":null,"title":"池田 樹生","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://tatsuki-i.github.io/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":["池田 樹生"],"categories":null,"content":"ここ数日悩み続けていた末尾再帰について, もしかしたら意外と簡単なんじゃないかという答えが出たのでまとめておきます. Haskellによる末尾再帰の情報は思いの外少なく, かなり苦戦しました. 例によって書いてるのは初心者です. 間違い等あればご指摘頂けるとありがたいです.\n##末尾再帰とは何ぞや？という話 \u0008\n 末尾再帰（まつびさいき）とは、再帰的な関数やプロシージャにおいて、自身の再帰呼び出しが、その計算における最後のステップになっているような再帰のパターンのことである。再帰にかかわらず一般に、そのような最後の呼び出しを末尾呼び出し （en:Tail call）という。呼び出しではなく、戻り先を保存しないジャンプに最適化できるという特徴がある。\n 出典:Wikipedia日本語版 末尾再帰\nだそうです.\n普通の再帰にするとスタックを馬鹿食いするので, 処理が重くなるらしい. 一方, 末尾再帰にすると使うスタックの量が減るので, 処理がとても軽いとのこと. 実際, 体感で重いなと感じる程には差が出ていました.\n##再帰の例\n###階乗\n再帰の例によく用いられる階乗を作っていきたいと思います.\nこれに例えば4を\u0008引数に渡すと,\nこのような演算過程を経て, \u0008階乗の\u0008結果を得られる事ができます. 一通り広げ晒してから演算を行うため, 処理は重くなります.\n次に末尾再帰版です.\nこちらにも同様に4を渡してみます.\nこうなります. 処理数も少なく, 一度出てきた演算はその時に終わらせているので非常に軽いです.\n##末尾再帰の考え方\n僕の中で出た結論は, 手続き型の時同様に考えるでした. \u0008手続き型言語でwhile文やfor文を使って計算する, あの時と同じ感覚です.\n具体的に説明していきます.\n手続き型的に書くとこうなりますね. これとほぼ同じ考え方で行けるんです.\nこの手続き型のプログラムの中には\n カウンタ 演算に必要な値 計算結果  の3つがあります. 今回の場合は,\n カウンタ →num 演算に必要な値 → num 計算結果 → result  となっています. 今回は階乗なので演算に必要な値と\u0008カウンタは同一の変数です. やってる内容としては,\n 計算結果入力用の変数resultを単位元で初期化 計算結果入力用の変数resultと演算に必要な値numを掛け合わせ, 結果を計算結果入力用の変数resultに代入 カウンタnumを1減らす  これをカウンタが０になるまで繰り返してるだけですね. じゃあこれを, 引数の中でやればいいんです. もう一度末尾再帰版をお見せします.\n まずは演算に必要な値であり, カウンタでもある\u0008定数nを\u0008factの引数から受け取り, ローカル関数fact\u0026#39;の第1引数xに渡し, fact\u0026#39;の第2引数である計算結果入力用の引数yを単位元で初期化する 自分自身を再帰呼び出しし, カウンタnを1減らした値を第1引数xに, 演算に必要な値xと計算結果入力用の引数yを掛け合わせた結果を第2引数に渡す  これを繰り返し, カウンタnが０になれば第2引数yを計算結果として返しているだけです.\nどうですか？ この考え方, かなり手続き型ちっくな気がしませんか？\n##他の例\n###累乗\n次は累乗を求める関数powです.\npowの場合は\u0008演算に必要な値とカウンタがそれぞれ違うため, 引数がもう1つ増えます. ですが, 引数が増えただけでやっている事は基本的に同じです.\n まずは演算に必要な値aを\u0008powの第1引数から受け取り, ローカル関数pow\u0026#39;の第1引数に渡し, カウンタである\u0008定数bを\u0008powの第2引数から受け取り, ローカル関数pow\u0026#39;の第2引数xに渡す. pow\u0026#39;の第3引数である計算結果入力用の引数yは単位元で初期化する 自分自身を再帰呼び出しし, 演算に必要な値aは不変なのでそのまま第引数に渡し, カウンタbを1減らした値を第2引数xに, 演算に必要な値aと計算結果入力用の引数cを掛け合わせた結果を第3引数に渡す  これを繰り返し, カウンタbが０になれば第1引数aを計算結果として返します. 実行過程は以下の通りです.\n###フィボナッチ数列\n最後にフィボナッチ数列です. きっと僕はこれを記事の中に書かないと落ち着かないんです.\nここまで来るともうきっと読めるはずですし, 見る前にも書けるんじゃないでしょうか？\n実行過程は以下の通りです.\nどうでしたか？ 思っていたより簡単だったんじゃないでしょうか？\n実際にはこれよりもっと速い実装もあるらしいのですが, 今の僕にはまだ分かりません. ここはこうした方が良い, 等の意見がありましたら是非コメントで教えて頂けるとありがたいです.\n","date":1653366849,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1653366849,"objectID":"ee903eb9bcd67c04e6a365cf5330e2fc","permalink":"https://tatsuki-i.github.io/post/%E3%82%82%E3%81%97%E3%81%8B%E3%81%97%E3%81%9F%E3%82%89%E6%9C%AB%E5%B0%BE%E5%86%8D%E5%B8%B0%E3%81%A3%E3%81%A6%E7%B0%A1%E5%8D%98%E3%81%AA%E3%82%93%E3%81%97%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E8%A9%B1-haskell/","publishdate":"2022-05-24T04:34:09.035Z","relpermalink":"/post/%E3%82%82%E3%81%97%E3%81%8B%E3%81%97%E3%81%9F%E3%82%89%E6%9C%AB%E5%B0%BE%E5%86%8D%E5%B8%B0%E3%81%A3%E3%81%A6%E7%B0%A1%E5%8D%98%E3%81%AA%E3%82%93%E3%81%97%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E8%A9%B1-haskell/","section":"post","summary":"ここ数日悩み続けていた末尾再帰について, もしかしたら意外と簡","tags":["Haskell","再帰","末尾再帰","フィボナッチ数列"],"title":"もしかしたら末尾再帰って簡単なんじゃないか？という話 #Haskell","type":"post"},{"authors":["池田 樹生"],"categories":null,"content":"#fib = 0 : 1 : zipWith (+) fib (tail fib)\nこちらの記事で紹介されていた キモいフィボナッチ数列がやっとの事で理解できたので\u0008, これ見よがしにドヤ顔で解説をしたいと思います. ただ, 僕は\u0008これを理解するので精一杯な初心者ですので, もし間違いやより良い表現等があれば教えて頂けると幸いです.\n\u0008 ##まずは見てみる\nまず問題のフィボナッチ数列はこちら\nここで注意して頂きたい点があります. このfibですが\u0008, このままだと動作しません. 実は\u0008僕は最初ここで躓いてしまい, これより先に進む事ができませんでした. 雑魚とか言わないで このfibというのは, 関数ではなく定数です(引数を取らない関数である多相定数というやつなのかなーと思っていますが, 多相定数が何なのかイマイチ理解できていません. 教えてエロい人!). 再帰的に定義をしていますし, いつもの関数定義のような形で書いているのでパッと見関数っぽいですが, 定数です.\n##じゃあ中身は一体どうなってるのさ\nfibの中身は無限リストになっています. Haskellでは, その値が本当に必要になるまで評価を行わない**遅延評価(lazy evaluation)**が採用されています. 無限の長さのリストが扱えるのは, LazyなHaskellだからこそできる芸当ですね. どこぞの軽音楽部とは違います\n はすける「Please say me “You are lazy!\u0026#34;」\n 話を元に戻しましょう. 無限リストfibの中から値を取り出したい場合は, リストの先頭からn個の要素を取り出したリストを返す関数take nを用いて,\nこのように, フィボでナッチなリストを, あなたのメモリと整数型の上限値が許す限り取り出すことができます.\n##いよいよ解読開始\nではまず定義を改めて確認していきます.\nfib :: Num a =\u0026gt; [a]というのは単純で, fibはNum型クラスの任意のインスタンスaのリストを返します, という意味になります.\n0:1:というのは[0, 1]++(リスト[0, 1]と, その後ろのリストを連結する)と同じ意味です.\n関数zipWithは二引数関数f, リストa, bを引数に取り, a, bの要素を先頭から順にfで合成したリストを返す関数です. 例えばzipWith (+) [1, 2, 3] [4, 5, 6]だと,\nのようになり, [5, 7, 9]\u0008を返します.\n要するに, fibは, [0, 1]というリストに, \u0008fibとtail fibの各要素をそれぞれ足したリストを連結した無限リストです\nfibの初期段階で分かっている要素は[0, 1...] tail fibの初期段階で分かっている要素はfibから先頭要素を除いた[1...]\nもうお気付きの方も多いかと思いますが, その通りです. この無限リストは, フィボナッチ数列の最初の2つの要素に, それをずらした数列2つの要素を足し合わせた\u0008リストを連結したものになっています. フィボナッチ数列は先頭2つの要素さえあれば後は分かりますから, これで求める事が出来るのです.\n##これ見よがしの解説\nまずは第\u00081段階です. 上に並んだ2つが\n3番目の要素が1である事が分かったので, リストの末尾に追加します.\n4番目の要素が2である事が分かったので, リストの末尾に追加.\n5番目の要素が3である事が分かったので(ry\n6番目の要素が5である(ry\nよって, 以下のようなリストになります.\n##以上です\nHaskellを思い通りに書けるようになりたいけど, 読むのが精一杯でいざ実装しようとなると全く書き方(文法ではなく考え方)が分からない今日此の頃. 誰か何かおすすめの方法等あれば教えてください.\n","date":1653366656,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1653366656,"objectID":"8b962447fc8b510041a90c47ecc579d7","permalink":"https://tatsuki-i.github.io/post/haskell%E3%81%AE%E3%82%AD%E3%83%A2%E3%81%84%E3%83%95%E3%82%A3%E3%83%9B%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0%E5%88%97%E3%81%8B%E3%82%84%E3%81%A3%E3%81%A8%E7%90%86%E8%A7%A3%E3%81%A6%E3%81%8D%E3%81%9F%E3%81%8B%E3%82%89%E3%81%93%E3%82%8C%E3%81%A6%E3%82%82%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E7%A8%8B%E3%81%AB%E7%B4%B0%E3%81%8B%E3%81%8F%E8%AA%AC%E6%98%8E%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F-haskell/","publishdate":"2022-05-24T04:30:56.221Z","relpermalink":"/post/haskell%E3%81%AE%E3%82%AD%E3%83%A2%E3%81%84%E3%83%95%E3%82%A3%E3%83%9B%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0%E5%88%97%E3%81%8B%E3%82%84%E3%81%A3%E3%81%A8%E7%90%86%E8%A7%A3%E3%81%A6%E3%81%8D%E3%81%9F%E3%81%8B%E3%82%89%E3%81%93%E3%82%8C%E3%81%A6%E3%82%82%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E7%A8%8B%E3%81%AB%E7%B4%B0%E3%81%8B%E3%81%8F%E8%AA%AC%E6%98%8E%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F-haskell/","section":"post","summary":"#fib = 0 : 1 : zipWith (+) fib (tail fib) こちらの記事で紹介されていた キモいフィ","tags":["Haskell","新人プログラマ応援","フィボナッチ数列"],"title":"Haskellのキモいフィボナッチ数列がやっと理解できたからこれでもかという程に細かく説明してみた #Haskell","type":"post"},{"authors":["池田 樹生"],"categories":[],"content":"  Download my PDF.\n","date":1641898520,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1641898520,"objectID":"0d36d558425bb394971935fcb004b041","permalink":"https://tatsuki-i.github.io/project/ergodicprng/","publishdate":"2022-01-11T19:55:20+09:00","relpermalink":"/project/ergodicprng/","section":"project","summary":"エルゴード性を用いた周期なし擬似乱数生成器","tags":["擬似乱数生成器","Haskell"],"title":"Ergodic PRNG","type":"project"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Wowchemy Wowchemy | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026#34;blueberry\u0026#34; if porridge == \u0026#34;blueberry\u0026#34;: print(\u0026#34;Eating...\u0026#34;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}} Press Space to play!\nOne  Two  Three   A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}} Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026#34;/media/boards.jpg\u0026#34; \u0026gt;}} {{\u0026lt; slide background-color=\u0026#34;#0000FF\u0026#34; \u0026gt;}} {{\u0026lt; slide class=\u0026#34;my-style\u0026#34; \u0026gt;}}  Custom CSS Example Let’s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://tatsuki-i.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":[],"categories":[],"content":"本当に最低限のVim入門 この記事はVim Advent Calendar 2016の17日目の記事です.\n先日はtodashutaさんで, Vim 8で便利になった組み込みMRUでした. こんな便利な機能があったんですね(無知ですみません…).\n対象読者 以下のような読者を想定しています.\n Vimを使ってみたいけど何から始めればいいか分からない人 Vimをそっ閉じした経験がある人(そっ閉じすら出来なかった人も含む) サーバーを触っていてVimを触らざるを得なくなった人 友人にキチガイじみたVimmerがいる人(←new)  はじめに Unix系OSやLinuxの場合は標準でインストールされている事がほとんどですが, もし入っていなかった場合はパッケージマネージャーからインストールして下さい.\nDebian系Linuxの場合 $ sudo apt-get install vim RedHat系Linuxの場合 $ sudo yum install vim Fedora22以降の場合 $ sudo dnf install vim ソースからコンパイルする場合 $ git clone https://github.com/vim/vim.git $ cd vim/src $ make Windows10の場合は, Bash on Windowsを使えば上記Ubuntuと同じようにインストールできます. それ以外のバージョンのWindowsの場合は, KaoriYaさんのホームページからダウンロードできるので, それを使えばいいかと思います.\n起動と終了 Terminalでvimコマンドを実行して下さい.\n$ vim Vimが起動しましたね.\nでは次に終了の仕方です. 以下のように打ち込んでEnterを押して下さい.\n:q終了しましたか？\nもし終了しなかった場合は, Escを連打してからもう1度試してみて下さい.\n設定ファイルの作成 Terminalでvimコマンドを実行する際に引数にファイル名を与える事で, そのファイルをVimで開く事ができます. また, まだ存在しないファイル名を指定すると新規ファイルを作成する事ができます.\n今回は, 皆さんが今後1番Vimで編集する事になるであろう, Vimの設定ファイルを作成しましょう. Vimの設定ファイルの名前は**.vimrc**です. ホームディレクトリに保存します.\n以下のように設定ファイルを新規作成しましょう.\n$ vim ~/.vimrc 何も書かれていないファイルが開いたと思います(環境によっては初めから何か書かれている可能性があります).\nでは最初の設定を書き込みましょう.\n今の状態では文字を入力することはできません. Vimを文字入力入力できる状態にするには, 挿入モードに切り替える必要があります.\nVimはデフォルトではノーマルモードになっています. ノーマルモードから挿入モードに切り替えるには, iと入力して下さい. すると文字が入力できるようになります.\n以下のように入力してみて下さい.\nsyntax on次に, 保存の方法です. 保存を行うにはノーマルモードに戻す必要があります.\nノーマルモードに戻るにはESCかCtrl+[を押します. US配列のキーボードを使っている人は後者の方が楽かと思います. 今後よく分からない状態になってしまった場合は, とりあえずESCを連打してみましょう. 大体なんとかなります.\n保存は以下のように入力することで行います.\n:w 設定の反映 では次に設定を反映してみましょう. Vimを再起動することによっても反映することができますが, 以下のコマンドを入力すると再起動なしに設定の反映が行なえます.\n:source ~/.vimrc色が付いたら成功です.\n設定の追加 更に設定を追記します. oを入力して下さい. すると改行して挿入モードに切り替わります. 以下を入力してみて下さい.\nset numberESCでノーマルモードに戻って下さい. 次に, この行を複製します. まずyyを入力して下さい. そのままpを入力して下さい. すると先程の行がペーストされます. 次にVimのカーソル操作です. Vimではhで左, jで下, kで上, lで右に移動できます. set numberのnの上までカーソルを移動させます. 次に連続置換です. そこでRを押して下さい. カーソル位置から連続で置換をすることができます. cursorlineと入力してESCでノーマルモードに戻って下さい. 以下のようになると成功です.\nset cursorline保存して終了 最後に保存して終了です. :wqを入力してエンターを押して下さい.\n終わりに 以上で本当に最低限のVim入門を終わります. これ本当に最低限か？全然足りねえよ, むしろ最低限ならそれ要らないだろ, 偏りすぎだ, 等の意見が多方面から聞こえて来そうですが… (こんな記事を書いてから言うのも何ですが, シェル上でvimtutorコマンドを叩いてみると主要な機能を網羅した素晴らしいチュートリアルが始まります. 30分ぐらいの時間の余裕があるならそっちをやる事をおすすめします)\nVimのコミュニティでは, 毎週土曜日23時からvimrc読書会というものを行っています. ここでは毎週強いVimmerの方々が色んな人の設定ファイルを読んで意見交換をしています. もっとVimの設定に関して知りたい方は, これに参加すると良いかと思います. vimrc読書会のロゴを作らせて頂きました. こういう形でしか力になれなくて申し訳ないですが…\nロゴ作ってみました#vimrc読書会 pic.twitter.com/o0QGcGDkzD\n— Tatsuki@Vim (@ttk_vim) 2016年10月29日  明日はmattnさんの記事です. どんな記事なのか楽しみですね.\n","date":1481966693,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1653297893,"objectID":"edc7d7dabde0547b48a84166f8f431e4","permalink":"https://tatsuki-i.github.io/post/vimrc/","publishdate":"2016-12-17T18:24:53+09:00","relpermalink":"/post/vimrc/","section":"post","summary":"本当に最低限のVim入門 この記事はVim Advent Calendar 2016の17日","tags":["Vim","vimrc","新人vimmer応援"],"title":"本当に最低限のvimrc入門 #vim","type":"post"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1461715200,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://tatsuki-i.github.io/project/example/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Example Project","type":"project"},{"authors":["池田 樹生","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"ja","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://tatsuki-i.github.io/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]