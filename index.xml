<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>日本語版</title><link>https://tatsuki-i.github.io/</link><atom:link href="https://tatsuki-i.github.io/index.xml" rel="self" type="application/rss+xml"/><description>日本語版</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja</language><lastBuildDate>Sat, 01 Jun 2030 13:00:00 +0000</lastBuildDate><image><url>https://tatsuki-i.github.io/media/icon_hu289a5bb365cd0c73bb390712e98aa29a_223035_512x512_fill_lanczos_center_3.png</url><title>日本語版</title><link>https://tatsuki-i.github.io/</link></image><item><title>Example Talk</title><link>https://tatsuki-i.github.io/talk/example-talk/</link><pubDate>Sat, 01 Jun 2030 13:00:00 +0000</pubDate><guid>https://tatsuki-i.github.io/talk/example-talk/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click on the &lt;strong>Slides&lt;/strong> button above to view the built-in slides feature.
&lt;/div>
&lt;/div>
&lt;p>Slides can be added in a few ways:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Create&lt;/strong> slides using Wowchemy&amp;rsquo;s &lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">&lt;em>Slides&lt;/em>&lt;/a> feature and link using &lt;code>slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Upload&lt;/strong> an existing slide deck to &lt;code>static/&lt;/code> and link using &lt;code>url_slides&lt;/code> parameter in the front matter of the talk file&lt;/li>
&lt;li>&lt;strong>Embed&lt;/strong> your slides (e.g. Google Slides) or presentation video on this page using &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">shortcodes&lt;/a>.&lt;/li>
&lt;/ul>
&lt;p>Further event details, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">page elements&lt;/a> such as image galleries, can be added to the body of this page.&lt;/p></description></item><item><title>Haskellのキモいフィボナッチ数列がやっと理解できたからこれでもかという程に細かく説明してみた #Haskell</title><link>https://tatsuki-i.github.io/post/haskell%E3%81%AE%E3%82%AD%E3%83%A2%E3%81%84%E3%83%95%E3%82%A3%E3%83%9B%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0%E5%88%97%E3%81%8B%E3%82%84%E3%81%A3%E3%81%A8%E7%90%86%E8%A7%A3%E3%81%A6%E3%81%8D%E3%81%9F%E3%81%8B%E3%82%89%E3%81%93%E3%82%8C%E3%81%A6%E3%82%82%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E7%A8%8B%E3%81%AB%E7%B4%B0%E3%81%8B%E3%81%8F%E8%AA%AC%E6%98%8E%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F-haskell/</link><pubDate>Tue, 24 May 2022 04:30:56 +0000</pubDate><guid>https://tatsuki-i.github.io/post/haskell%E3%81%AE%E3%82%AD%E3%83%A2%E3%81%84%E3%83%95%E3%82%A3%E3%83%9B%E3%83%8A%E3%83%83%E3%83%81%E6%95%B0%E5%88%97%E3%81%8B%E3%82%84%E3%81%A3%E3%81%A8%E7%90%86%E8%A7%A3%E3%81%A6%E3%81%8D%E3%81%9F%E3%81%8B%E3%82%89%E3%81%93%E3%82%8C%E3%81%A6%E3%82%82%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E7%A8%8B%E3%81%AB%E7%B4%B0%E3%81%8B%E3%81%8F%E8%AA%AC%E6%98%8E%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F-haskell/</guid><description>&lt;p>#&lt;code>fib = 0 : 1 : zipWith (+) fib (tail fib)&lt;/code>&lt;/p>
&lt;p>&lt;a href="https://chomado.com/programming/haskell/haskell-%e3%82%ad%e3%83%a2%e3%81%84%e3%83%95%e3%82%a3%e3%83%9c%e3%83%8a%e3%83%83%e3%83%81%e6%95%b0%e5%88%97%e3%81%ae%e8%a7%a3%e8%aa%ad%e3%82%92%e8%a9%a6%e3%81%bf%e3%82%8b/" target="_blank" rel="noopener">こちらの記事&lt;/a>で紹介されていた &lt;strong>キモいフィボナッチ数列&lt;/strong>がやっとの事で理解できたので, これ見よがしにドヤ顔で解説をしたいと思います.
ただ, 僕はこれを理解するので精一杯な初心者ですので, もし間違いやより良い表現等があれば教えて頂けると幸いです.&lt;/p>
&lt;p>
##まずは見てみる&lt;/p>
&lt;p>まず問題のフィボナッチ数列はこちら&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:fib.hs" data-lang="hs:fib.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで注意して頂きたい点があります.
この&lt;code>fib&lt;/code>ですが, このままだと動作しません. 実は僕は最初ここで躓いてしまい, これより先に進む事ができませんでした. &lt;del>雑魚とか言わないで&lt;/del>
この&lt;code>fib&lt;/code>というのは, &lt;strong>関数ではなく定数&lt;/strong>です(引数を取らない関数である多相定数というやつなのかなーと思っていますが, 多相定数が何なのかイマイチ理解できていません. &lt;del>&lt;a href="http://dic.nicovideo.jp/a/%e6%95%99%e3%81%88%e3%81%a6%e3%82%a8%e3%83%ad%e3%81%84%e4%ba%ba" target="_blank" rel="noopener">教えてエロい人!&lt;/a>&lt;/del>).
再帰的に定義をしていますし, いつもの関数定義のような形で書いているのでパッと見関数っぽいですが, 定数です.&lt;/p>
&lt;p>##じゃあ中身は一体どうなってるのさ&lt;/p>
&lt;p>&lt;code>fib&lt;/code>の中身は無限リストになっています.
Haskellでは, その値が本当に必要になるまで評価を行わない**遅延評価(lazy evaluation)**が採用されています. 無限の長さのリストが扱えるのは, LazyなHaskellだからこそできる芸当ですね. どこぞの軽音楽部とは違います&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>はすける「Please say me &amp;ldquo;You are lazy!&amp;quot;」&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>話を元に戻しましょう.
無限リスト&lt;code>fib&lt;/code>の中から値を取り出したい場合は, リストの先頭から&lt;code>n&lt;/code>個の要素を取り出したリストを返す関数&lt;code>take n&lt;/code>を用いて,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:fib.hs" data-lang="hs:fib.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code class="language-hs:実行結果" data-lang="hs:実行結果">&lt;/code>&lt;/pre>&lt;p>このように, フィボでナッチなリストを, あなたのメモリと整数型の上限値が許す限り取り出すことができます.&lt;/p>
&lt;p>##いよいよ解読開始&lt;/p>
&lt;p>ではまず定義を改めて確認していきます.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:fib.hs" data-lang="hs:fib.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fib :: Num a =&amp;gt; [a]&lt;/code>というのは単純で, &lt;strong>&lt;code>fib&lt;/code>はNum型クラスの任意のインスタンス&lt;code>a&lt;/code>のリストを返します&lt;/strong>, という意味になります.&lt;/p>
&lt;p>&lt;code>0:1:&lt;/code>というのは&lt;code>[0, 1]++&lt;/code>(リスト[0, 1]と, その後ろのリストを連結する)と同じ意味です.&lt;/p>
&lt;p>関数&lt;code>zipWith&lt;/code>は二引数関数f, リストa, bを引数に取り, a, bの要素を先頭から順にfで合成したリストを返す関数です.
例えば&lt;code>zipWith (+) [1, 2, 3] [4, 5, 6]&lt;/code>だと,&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:zipWith" data-lang="hs:zipWith">&lt;/code>&lt;/pre>&lt;p>のようになり, &lt;code>[5, 7, 9]&lt;/code>を返します.&lt;/p>
&lt;p>要するに, &lt;code>fib&lt;/code>は, &lt;strong>[0, 1]というリストに, &lt;code>fib&lt;/code>と&lt;code>tail fib&lt;/code>の各要素をそれぞれ足したリストを連結した無限リスト&lt;/strong>です&lt;/p>
&lt;p>&lt;code>fib&lt;/code>の初期段階で分かっている要素は&lt;code>[0, 1...]&lt;/code>
&lt;code>tail fib&lt;/code>の初期段階で分かっている要素は&lt;code>fib&lt;/code>から先頭要素を除いた&lt;code>[1...]&lt;/code>&lt;/p>
&lt;p>もうお気付きの方も多いかと思いますが, その通りです. この無限リストは, &lt;strong>フィボナッチ数列の最初の2つの要素に, それをずらした数列2つの要素を足し合わせたリストを連結したもの&lt;/strong>になっています.
フィボナッチ数列は先頭2つの要素さえあれば後は分かりますから, これで求める事が出来るのです.&lt;/p>
&lt;p>##これ見よがしの解説&lt;/p>
&lt;p>まずは第1段階です.
上に並んだ2つが&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:第1段階" data-lang="hs:第1段階">&lt;/code>&lt;/pre>&lt;p>3番目の要素が1である事が分かったので, リストの末尾に追加します.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:第2段階" data-lang="hs:第2段階">&lt;/code>&lt;/pre>&lt;p>4番目の要素が2である事が分かったので, リストの末尾に追加.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:第3段階" data-lang="hs:第3段階">&lt;/code>&lt;/pre>&lt;p>5番目の要素が3である事が分かったので(ry&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:第4段階" data-lang="hs:第4段階">&lt;/code>&lt;/pre>&lt;p>6番目の要素が5である(ry&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:第5段階" data-lang="hs:第5段階">&lt;/code>&lt;/pre>&lt;p>よって, 以下のようなリストになります.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs" data-lang="hs">&lt;/code>&lt;/pre>&lt;/div>&lt;p>##以上です&lt;/p>
&lt;p>Haskellを思い通りに書けるようになりたいけど, 読むのが精一杯でいざ実装しようとなると全く書き方(文法ではなく考え方)が分からない今日此の頃. 誰か何かおすすめの方法等あれば教えてください.&lt;/p></description></item><item><title>Ergodic PRNG</title><link>https://tatsuki-i.github.io/project/ergodicprng/</link><pubDate>Tue, 11 Jan 2022 19:55:20 +0900</pubDate><guid>https://tatsuki-i.github.io/project/ergodicprng/</guid><description>&lt;p>
&lt;i class="fas fa-download pr-1 fa-fw">&lt;/i> Download my &lt;a href="https://tatsuki-i.github.io/uploads/ErgodicPRNG.pdf" target="_blank">PDF&lt;/a>.&lt;/p></description></item><item><title>Slides</title><link>https://tatsuki-i.github.io/slides/example/</link><pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate><guid>https://tatsuki-i.github.io/slides/example/</guid><description>&lt;h1 id="create-slides-in-markdown-with-wowchemy">Create slides in Markdown with Wowchemy&lt;/h1>
&lt;p>&lt;a href="https://wowchemy.com/" target="_blank" rel="noopener">Wowchemy&lt;/a> | &lt;a href="https://owchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="features">Features&lt;/h2>
&lt;ul>
&lt;li>Efficiently write slides in Markdown&lt;/li>
&lt;li>3-in-1: Create, Present, and Publish your slides&lt;/li>
&lt;li>Supports speaker notes&lt;/li>
&lt;li>Mobile friendly slides&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="controls">Controls&lt;/h2>
&lt;ul>
&lt;li>Next: &lt;code>Right Arrow&lt;/code> or &lt;code>Space&lt;/code>&lt;/li>
&lt;li>Previous: &lt;code>Left Arrow&lt;/code>&lt;/li>
&lt;li>Start: &lt;code>Home&lt;/code>&lt;/li>
&lt;li>Finish: &lt;code>End&lt;/code>&lt;/li>
&lt;li>Overview: &lt;code>Esc&lt;/code>&lt;/li>
&lt;li>Speaker notes: &lt;code>S&lt;/code>&lt;/li>
&lt;li>Fullscreen: &lt;code>F&lt;/code>&lt;/li>
&lt;li>Zoom: &lt;code>Alt + Click&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://revealjs.com/pdf-export/" target="_blank" rel="noopener">PDF Export&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="code-highlighting">Code Highlighting&lt;/h2>
&lt;p>Inline code: &lt;code>variable&lt;/code>&lt;/p>
&lt;p>Code block:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="n">porridge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;blueberry&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">porridge&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;blueberry&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Eating...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="math">Math&lt;/h2>
&lt;p>In-line math: $x + y = z$&lt;/p>
&lt;p>Block math:&lt;/p>
&lt;p>$$
f\left( x \right) = ;\frac{{2\left( {x + 4} \right)\left( {x - 4} \right)}}{{\left( {x + 4} \right)\left( {x + 1} \right)}}
$$&lt;/p>
&lt;hr>
&lt;h2 id="fragments">Fragments&lt;/h2>
&lt;p>Make content appear incrementally&lt;/p>
&lt;pre tabindex="0">&lt;code>{{% fragment %}} One {{% /fragment %}}
{{% fragment %}} **Two** {{% /fragment %}}
{{% fragment %}} Three {{% /fragment %}}
&lt;/code>&lt;/pre>&lt;p>Press &lt;code>Space&lt;/code> to play!&lt;/p>
&lt;span class="fragment " >
One
&lt;/span>
&lt;span class="fragment " >
&lt;strong>Two&lt;/strong>
&lt;/span>
&lt;span class="fragment " >
Three
&lt;/span>
&lt;hr>
&lt;p>A fragment can accept two optional parameters:&lt;/p>
&lt;ul>
&lt;li>&lt;code>class&lt;/code>: use a custom style (requires definition in custom CSS)&lt;/li>
&lt;li>&lt;code>weight&lt;/code>: sets the order in which a fragment appears&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="speaker-notes">Speaker Notes&lt;/h2>
&lt;p>Add speaker notes to your presentation&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">{{% speaker_note %}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> Only the speaker can read these notes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">-&lt;/span> Press &lt;span class="sb">`S`&lt;/span> key to view
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {{% /speaker_note %}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Press the &lt;code>S&lt;/code> key to view the speaker notes!&lt;/p>
&lt;aside class="notes">
&lt;ul>
&lt;li>Only the speaker can read these notes&lt;/li>
&lt;li>Press &lt;code>S&lt;/code> key to view&lt;/li>
&lt;/ul>
&lt;/aside>
&lt;hr>
&lt;h2 id="themes">Themes&lt;/h2>
&lt;ul>
&lt;li>black: Black background, white text, blue links (default)&lt;/li>
&lt;li>white: White background, black text, blue links&lt;/li>
&lt;li>league: Gray background, white text, blue links&lt;/li>
&lt;li>beige: Beige background, dark text, brown links&lt;/li>
&lt;li>sky: Blue background, thin dark text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>night: Black background, thick white text, orange links&lt;/li>
&lt;li>serif: Cappuccino background, gray text, brown links&lt;/li>
&lt;li>simple: White background, black text, blue links&lt;/li>
&lt;li>solarized: Cream-colored background, dark green text, blue links&lt;/li>
&lt;/ul>
&lt;hr>
&lt;section data-noprocess data-shortcode-slide
data-background-image="/media/boards.jpg"
>
&lt;h2 id="custom-slide">Custom Slide&lt;/h2>
&lt;p>Customize the slide style and background&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-markdown" data-lang="markdown">&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">background-image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/media/boards.jpg&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">background-color&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;#0000FF&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{{&lt;span class="p">&amp;lt;&lt;/span> &lt;span class="nt">slide&lt;/span> &lt;span class="na">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;my-style&amp;#34;&lt;/span> &lt;span class="p">&amp;gt;&lt;/span>}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="custom-css-example">Custom CSS Example&lt;/h2>
&lt;p>Let&amp;rsquo;s make headers navy colored.&lt;/p>
&lt;p>Create &lt;code>assets/css/reveal_custom.css&lt;/code> with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h1&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h2&lt;/span>&lt;span class="o">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">reveal&lt;/span> &lt;span class="nt">section&lt;/span> &lt;span class="nt">h3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">navy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h1 id="questions">Questions?&lt;/h1>
&lt;p>&lt;a href="https://github.com/wowchemy/wowchemy-hugo-modules/discussions" target="_blank" rel="noopener">Ask&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://wowchemy.com/docs/managing-content/#create-slides" target="_blank" rel="noopener">Documentation&lt;/a>&lt;/p></description></item><item><title>本当に最低限のvimrc入門 #vim</title><link>https://tatsuki-i.github.io/post/vimrc/</link><pubDate>Sat, 17 Dec 2016 18:24:53 +0900</pubDate><guid>https://tatsuki-i.github.io/post/vimrc/</guid><description>&lt;h1 id="本当に最低限のvim入門">本当に最低限のVim入門&lt;/h1>
&lt;p>この記事は&lt;a href="http://qiita.com/advent-calendar/2016/vim" target="_blank" rel="noopener">Vim Advent Calendar 2016&lt;/a>の17日目の記事です.&lt;/p>
&lt;p>先日は&lt;a href="http://qiita.com/todashuta" target="_blank" rel="noopener">todashuta&lt;/a>さんで, &lt;a href="http://qiita.com/todashuta/items/1362654c6276e5b69abc" target="_blank" rel="noopener">Vim 8で便利になった組み込みMRU&lt;/a>でした. こんな便利な機能があったんですね(無知ですみません&amp;hellip;).&lt;/p>
&lt;h2 id="対象読者">対象読者&lt;/h2>
&lt;p>以下のような読者を想定しています.&lt;/p>
&lt;ul>
&lt;li>Vimを使ってみたいけど何から始めればいいか分からない人&lt;/li>
&lt;li>Vimをそっ閉じした経験がある人(そっ閉じすら出来なかった人も含む)&lt;/li>
&lt;li>サーバーを触っていてVimを触らざるを得なくなった人&lt;/li>
&lt;li>友人にキチガイじみたVimmerがいる人(←new)&lt;/li>
&lt;/ul>
&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>Unix系OSやLinuxの場合は標準でインストールされている事がほとんどですが, もし入っていなかった場合はパッケージマネージャーからインストールして下さい.&lt;/p>
&lt;h3 id="debian系linuxの場合">Debian系Linuxの場合&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo apt-get install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="redhat系linuxの場合">RedHat系Linuxの場合&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo yum install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="fedora22以降の場合">Fedora22以降の場合&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo dnf install vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ソースからコンパイルする場合">ソースからコンパイルする場合&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/vim/vim.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> vim/src
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Windows10の場合は, Bash on Windowsを使えば上記Ubuntuと同じようにインストールできます. それ以外のバージョンのWindowsの場合は, &lt;a href="https://www.kaoriya.net/software/vim/" target="_blank" rel="noopener">KaoriYaさんのホームページ&lt;/a>からダウンロードできるので, それを使えばいいかと思います.&lt;/p>
&lt;h2 id="起動と終了">起動と終了&lt;/h2>
&lt;p>Terminalでvimコマンドを実行して下さい.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ vim
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Vimが起動しましたね.&lt;br>
では次に終了の仕方です. 以下のように打ち込んでEnterを押して下さい.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="p">:&lt;/span>&lt;span class="nx">q&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>終了しましたか？&lt;br>
もし終了しなかった場合は, &lt;code>Esc&lt;/code>を連打してからもう1度試してみて下さい.&lt;/p>
&lt;h2 id="設定ファイルの作成">設定ファイルの作成&lt;/h2>
&lt;p>Terminalでvimコマンドを実行する際に引数にファイル名を与える事で, そのファイルをVimで開く事ができます. また, まだ存在しないファイル名を指定すると新規ファイルを作成する事ができます.&lt;br>
今回は, 皆さんが今後1番Vimで編集する事になるであろう, Vimの設定ファイルを作成しましょう. Vimの設定ファイルの名前は**.vimrc**です. ホームディレクトリに保存します.&lt;br>
以下のように設定ファイルを新規作成しましょう.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ vim ~/.vimrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>何も書かれていないファイルが開いたと思います(環境によっては初めから何か書かれている可能性があります).&lt;br>
では最初の設定を書き込みましょう.&lt;br>
今の状態では文字を入力することはできません. Vimを文字入力入力できる状態にするには, 挿入モードに切り替える必要があります.&lt;br>
Vimはデフォルトではノーマルモードになっています. ノーマルモードから挿入モードに切り替えるには, &lt;code>i&lt;/code>と入力して下さい. すると文字が入力できるようになります.&lt;br>
以下のように入力してみて下さい.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">syntax&lt;/span> &lt;span class="nx">on&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>次に, 保存の方法です. 保存を行うにはノーマルモードに戻す必要があります.&lt;br>
ノーマルモードに戻るには&lt;code>ESC&lt;/code>か&lt;code>Ctrl+[&lt;/code>を押します. US配列のキーボードを使っている人は後者の方が楽かと思います. 今後よく分からない状態になってしまった場合は, とりあえず&lt;code>ESC&lt;/code>を連打してみましょう. 大体なんとかなります.&lt;br>
保存は以下のように入力することで行います.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="p">:&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="設定の反映">設定の反映&lt;/h2>
&lt;p>では次に設定を反映してみましょう. Vimを再起動することによっても反映することができますが, 以下のコマンドを入力すると再起動なしに設定の反映が行なえます.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="p">:&lt;/span>&lt;span class="nx">source&lt;/span> &lt;span class="p">~&lt;/span>/.&lt;span class="nx">vimrc&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>色が付いたら成功です.&lt;/p>
&lt;h2 id="設定の追加">設定の追加&lt;/h2>
&lt;p>更に設定を追記します.
&lt;code>o&lt;/code>を入力して下さい. すると改行して挿入モードに切り替わります.
以下を入力してみて下さい.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">set&lt;/span> &lt;span class="nx">number&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ESC&lt;/code>でノーマルモードに戻って下さい.
次に, この行を複製します. まず&lt;code>yy&lt;/code>を入力して下さい.
そのまま&lt;code>p&lt;/code>を入力して下さい. すると先程の行がペーストされます.
次にVimのカーソル操作です. Vimでは&lt;code>h&lt;/code>で左, &lt;code>j&lt;/code>で下, &lt;code>k&lt;/code>で上, &lt;code>l&lt;/code>で右に移動できます.
&lt;code>set number&lt;/code>のnの上までカーソルを移動させます.
次に連続置換です. そこで&lt;code>R&lt;/code>を押して下さい. カーソル位置から連続で置換をすることができます.
&lt;code>cursorline&lt;/code>と入力して&lt;code>ESC&lt;/code>でノーマルモードに戻って下さい.
以下のようになると成功です.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">set&lt;/span> &lt;span class="nx">cursorline&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="保存して終了">保存して終了&lt;/h2>
&lt;p>最後に保存して終了です. &lt;code>:wq&lt;/code>を入力してエンターを押して下さい.&lt;/p>
&lt;h2 id="終わりに">終わりに&lt;/h2>
&lt;p>以上で本当に最低限のVim入門を終わります.
これ本当に最低限か？全然足りねえよ, むしろ最低限ならそれ要らないだろ, 偏りすぎだ, 等の意見が多方面から聞こえて来そうですが&amp;hellip;
(こんな記事を書いてから言うのも何ですが, シェル上でvimtutorコマンドを叩いてみると主要な機能を網羅した素晴らしいチュートリアルが始まります. 30分ぐらいの時間の余裕があるならそっちをやる事をおすすめします)&lt;/p>
&lt;p>Vimのコミュニティでは, 毎週土曜日23時から&lt;a href="http://vim-jp.org/reading-vimrc/" target="_blank" rel="noopener">vimrc読書会&lt;/a>というものを行っています. ここでは毎週強いVimmerの方々が色んな人の設定ファイルを読んで意見交換をしています. もっとVimの設定に関して知りたい方は, これに参加すると良いかと思います.
vimrc読書会のロゴを作らせて頂きました. こういう形でしか力になれなくて申し訳ないですが&amp;hellip;&lt;/p>
&lt;blockquote class="twitter-tweet" data-lang="ja">&lt;p lang="ja" dir="ltr">ロゴ作ってみました&lt;a href="https://twitter.com/hashtag/vimrc%E8%AA%AD%E6%9B%B8%E4%BC%9A?src=hash">#vimrc読書会&lt;/a> &lt;a href="https://t.co/o0QGcGDkzD">pic.twitter.com/o0QGcGDkzD&lt;/a>&lt;/p>&amp;mdash; Tatsuki@Vim (@ttk_vim) &lt;a href="https://twitter.com/ttk_vim/status/792409759311798272">2016年10月29日&lt;/a>&lt;/blockquote>
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>明日は&lt;a href="http://qiita.com/mattn" target="_blank" rel="noopener">mattn&lt;/a>さんの記事です. どんな記事なのか楽しみですね.&lt;/p></description></item><item><title>Example Project</title><link>https://tatsuki-i.github.io/project/example/</link><pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate><guid>https://tatsuki-i.github.io/project/example/</guid><description>&lt;p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p>
&lt;p>Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p>
&lt;p>Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p>
&lt;p>Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p>
&lt;p>Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p></description></item><item><title>An example conference paper</title><link>https://tatsuki-i.github.io/publication/example/</link><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid>https://tatsuki-i.github.io/publication/example/</guid><description>&lt;div class="alert alert-note">
&lt;div>
Click the &lt;em>Cite&lt;/em> button above to demo the feature to enable visitors to import publication metadata into their reference management software.
&lt;/div>
&lt;/div>
&lt;div class="alert alert-note">
&lt;div>
Create your slides in Markdown - click the &lt;em>Slides&lt;/em> button to check out the example.
&lt;/div>
&lt;/div>
&lt;p>Supplementary notes can be added here, including &lt;a href="https://wowchemy.com/docs/writing-markdown-latex/" target="_blank" rel="noopener">code, math, and images&lt;/a>.&lt;/p></description></item><item><title/><link>https://tatsuki-i.github.io/admin/config.yml</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://tatsuki-i.github.io/admin/config.yml</guid><description/></item></channel></rss>