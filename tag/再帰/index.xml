<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>再帰 | 日本語版</title><link>https://tatsuki-i.github.io/tag/%E5%86%8D%E5%B8%B0/</link><atom:link href="https://tatsuki-i.github.io/tag/%E5%86%8D%E5%B8%B0/index.xml" rel="self" type="application/rss+xml"/><description>再帰</description><generator>Wowchemy (https://wowchemy.com)</generator><language>ja</language><lastBuildDate>Tue, 24 May 2022 04:34:09 +0000</lastBuildDate><image><url>https://tatsuki-i.github.io/media/icon_hu289a5bb365cd0c73bb390712e98aa29a_223035_512x512_fill_lanczos_center_3.png</url><title>再帰</title><link>https://tatsuki-i.github.io/tag/%E5%86%8D%E5%B8%B0/</link></image><item><title>もしかしたら末尾再帰って簡単なんじゃないか？という話 #Haskell</title><link>https://tatsuki-i.github.io/post/%E3%82%82%E3%81%97%E3%81%8B%E3%81%97%E3%81%9F%E3%82%89%E6%9C%AB%E5%B0%BE%E5%86%8D%E5%B8%B0%E3%81%A3%E3%81%A6%E7%B0%A1%E5%8D%98%E3%81%AA%E3%82%93%E3%81%97%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E8%A9%B1-haskell/</link><pubDate>Tue, 24 May 2022 04:34:09 +0000</pubDate><guid>https://tatsuki-i.github.io/post/%E3%82%82%E3%81%97%E3%81%8B%E3%81%97%E3%81%9F%E3%82%89%E6%9C%AB%E5%B0%BE%E5%86%8D%E5%B8%B0%E3%81%A3%E3%81%A6%E7%B0%A1%E5%8D%98%E3%81%AA%E3%82%93%E3%81%97%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%A8%E3%81%84%E3%81%86%E8%A9%B1-haskell/</guid><description>&lt;p>ここ数日悩み続けていた末尾再帰について, もしかしたら意外と簡単なんじゃないかという答えが出たのでまとめておきます.
Haskellによる末尾再帰の情報は思いの外少なく, かなり苦戦しました.
例によって書いてるのは初心者です. 間違い等あればご指摘頂けるとありがたいです.&lt;/p>
&lt;p>##末尾再帰とは何ぞや？という話
&lt;/p>
&lt;blockquote>
&lt;p>末尾再帰（まつびさいき）とは、再帰的な関数やプロシージャにおいて、自身の再帰呼び出しが、その計算における最後のステップになっているような再帰のパターンのことである。再帰にかかわらず一般に、そのような最後の呼び出しを末尾呼び出し （en:Tail call）という。呼び出しではなく、戻り先を保存しないジャンプに最適化できるという特徴がある。&lt;/p>
&lt;/blockquote>
&lt;p>出典:Wikipedia日本語版 &lt;a href="https://ja.wikipedia.org/wiki/%e6%9c%ab%e5%b0%be%e5%86%8d%e5%b8%b0" target="_blank" rel="noopener">末尾再帰&lt;/a>&lt;/p>
&lt;p>だそうです.&lt;/p>
&lt;p>普通の再帰にするとスタックを馬鹿食いするので, 処理が重くなるらしい.
一方, 末尾再帰にすると使うスタックの量が減るので, 処理がとても軽いとのこと.
実際, 体感で重いなと感じる程には差が出ていました.&lt;/p>
&lt;p>##再帰の例&lt;/p>
&lt;p>###階乗&lt;/p>
&lt;p>再帰の例によく用いられる階乗を作っていきたいと思います.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:fact.hs" data-lang="hs:fact.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;p>これに例えば4を引数に渡すと,&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:実行過程" data-lang="hs:実行過程">&lt;/code>&lt;/pre>&lt;p>このような演算過程を経て, 階乗の結果を得られる事ができます.
一通り広げ晒してから演算を行うため, 処理は重くなります.&lt;/p>
&lt;p>次に末尾再帰版です.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:fact_TailCall.hs" data-lang="hs:fact_TailCall.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;p>こちらにも同様に4を渡してみます.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:実行過程" data-lang="hs:実行過程">&lt;/code>&lt;/pre>&lt;p>こうなります.
処理数も少なく, 一度出てきた演算はその時に終わらせているので非常に軽いです.&lt;/p>
&lt;p>##末尾再帰の考え方&lt;/p>
&lt;p>僕の中で出た結論は, &lt;strong>手続き型の時同様に考える&lt;/strong>でした.
手続き型言語でwhile文やfor文を使って計算する, あの時と同じ感覚です.&lt;/p>
&lt;p>具体的に説明していきます.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp:fact.c" data-lang="cpp:fact.c">&lt;/code>&lt;/pre>&lt;/div>&lt;p>手続き型的に書くとこうなりますね.
これとほぼ同じ考え方で行けるんです.&lt;/p>
&lt;p>この手続き型のプログラムの中には&lt;/p>
&lt;ul>
&lt;li>カウンタ&lt;/li>
&lt;li>演算に必要な値&lt;/li>
&lt;li>計算結果&lt;/li>
&lt;/ul>
&lt;p>の3つがあります.
今回の場合は,&lt;/p>
&lt;ul>
&lt;li>カウンタ →&lt;code>num&lt;/code>&lt;/li>
&lt;li>演算に必要な値 → &lt;code>num&lt;/code>&lt;/li>
&lt;li>計算結果 → &lt;code>result&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>となっています.
今回は階乗なので演算に必要な値とカウンタは同一の変数です.
やってる内容としては,&lt;/p>
&lt;ol>
&lt;li>計算結果入力用の変数&lt;code>result&lt;/code>を単位元で初期化&lt;/li>
&lt;li>計算結果入力用の変数&lt;code>result&lt;/code>と演算に必要な値&lt;code>num&lt;/code>を掛け合わせ, 結果を計算結果入力用の変数&lt;code>result&lt;/code>に代入&lt;/li>
&lt;li>カウンタ&lt;code>num&lt;/code>を1減らす&lt;/li>
&lt;/ol>
&lt;p>これをカウンタが０になるまで繰り返してるだけですね.
じゃあこれを, 引数の中でやればいいんです.
もう一度末尾再帰版をお見せします.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:fact_TailCall.hs" data-lang="hs:fact_TailCall.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;ol>
&lt;li>まずは演算に必要な値であり, カウンタでもある定数&lt;code>n&lt;/code>を&lt;code>fact&lt;/code>の引数から受け取り, ローカル関数&lt;code>fact'&lt;/code>の第1引数&lt;code>x&lt;/code>に渡し, &lt;code>fact'&lt;/code>の第2引数である計算結果入力用の引数&lt;code>y&lt;/code>を単位元で初期化する&lt;/li>
&lt;li>自分自身を再帰呼び出しし, カウンタ&lt;code>n&lt;/code>を&lt;code>1&lt;/code>減らした値を第1引数&lt;code>x&lt;/code>に, 演算に必要な値&lt;code>x&lt;/code>と計算結果入力用の引数&lt;code>y&lt;/code>を掛け合わせた結果を第2引数に渡す&lt;/li>
&lt;/ol>
&lt;p>これを繰り返し, カウンタ&lt;code>n&lt;/code>が&lt;code>０&lt;/code>になれば第2引数&lt;code>y&lt;/code>を計算結果として返しているだけです.&lt;/p>
&lt;p>どうですか？
この考え方, かなり手続き型ちっくな気がしませんか？&lt;/p>
&lt;p>##他の例&lt;/p>
&lt;p>###累乗&lt;/p>
&lt;p>次は累乗を求める関数&lt;code>pow&lt;/code>です.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:pow_TailCall.hs" data-lang="hs:pow_TailCall.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pow&lt;/code>の場合は演算に必要な値とカウンタがそれぞれ違うため, 引数がもう1つ増えます.
ですが, 引数が増えただけでやっている事は基本的に同じです.&lt;/p>
&lt;ol>
&lt;li>まずは演算に必要な値&lt;code>a&lt;/code>を&lt;code>pow&lt;/code>の第1引数から受け取り, ローカル関数&lt;code>pow'&lt;/code>の第1引数に渡し, カウンタである定数&lt;code>b&lt;/code>を&lt;code>pow&lt;/code>の第2引数から受け取り, ローカル関数&lt;code>pow'&lt;/code>の第2引数&lt;code>x&lt;/code>に渡す. &lt;code>pow'&lt;/code>の第3引数である計算結果入力用の引数&lt;code>y&lt;/code>は単位元で初期化する&lt;/li>
&lt;li>自分自身を再帰呼び出しし, 演算に必要な値&lt;code>a&lt;/code>は不変なのでそのまま第引数に渡し, カウンタ&lt;code>b&lt;/code>を&lt;code>1&lt;/code>減らした値を第2引数&lt;code>x&lt;/code>に, 演算に必要な値&lt;code>a&lt;/code>と計算結果入力用の引数&lt;code>c&lt;/code>を掛け合わせた結果を第3引数に渡す&lt;/li>
&lt;/ol>
&lt;p>これを繰り返し, カウンタ&lt;code>b&lt;/code>が&lt;code>０&lt;/code>になれば第1引数&lt;code>a&lt;/code>を計算結果として返します.
実行過程は以下の通りです.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:実行過程" data-lang="hs:実行過程">&lt;/code>&lt;/pre>&lt;p>###フィボナッチ数列&lt;/p>
&lt;p>最後にフィボナッチ数列です.
きっと僕はこれを記事の中に書かないと落ち着かないんです.&lt;/p>
&lt;p>ここまで来るともうきっと読めるはずですし, 見る前にも書けるんじゃないでしょうか？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-hs:fib_TailCall.hs" data-lang="hs:fib_TailCall.hs">&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行過程は以下の通りです.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-hs:実行過程" data-lang="hs:実行過程">&lt;/code>&lt;/pre>&lt;p>どうでしたか？
思っていたより簡単だったんじゃないでしょうか？&lt;/p>
&lt;p>実際にはこれよりもっと速い実装もあるらしいのですが, 今の僕にはまだ分かりません.
ここはこうした方が良い, 等の意見がありましたら是非コメントで教えて頂けるとありがたいです.&lt;/p></description></item></channel></rss>